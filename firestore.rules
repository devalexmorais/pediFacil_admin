rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Função para verificar se o usuário é o proprietário do documento
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Função para verificar se o usuário está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }

    // Função para verificar se o usuário é administrador
    function isAdmin() {
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return request.auth != null && 
             user != null && 
             user.data != null && 
             ('role' in user.data) && 
             user.data.role == 'ADMIN';
    }
    
    // Regras para cupons
    match /coupons/{couponId} {
      allow read: if true;
      allow create, update, delete: if isAuthenticated();
    }
    
    // Regras para banners
    match /banners/{bannerId} {
      allow read: if true;
      allow create, update, delete: if isAuthenticated();
    }
    
    // Regra geral para leitura
    match /{document=**} {
      allow read: if true;
    }
    
    match /notifications/{notificationId} {
     allow read: if isAuthenticated();
     allow create: if isAuthenticated();
     allow update: if isAuthenticated();
     allow delete: if isAuthenticated();
   }
   
  match /devices/{deviceId} {
     allow read: if isAuthenticated();
     allow create, update, delete: if isAuthenticated();
   }
    
   // Regras específicas para usuários
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if isAuthenticated();
      allow delete: if request.auth != null && request.auth.uid == userId;
  	// Permissão específica para a subcoleção usedCoupons
      match /usedCoupons/{couponId} {
        allow read: if true;
        // Permitir que o próprio usuário ou qualquer parceiro autenticado crie registros
        allow create: if isAuthenticated();
        allow update, delete: if isOwner(userId);
      }

      match /favorites/{favoriteId} {
        allow read: if true;
        allow create, update, delete: if isOwner(userId);
      }

      match /orders/{orderId} {
        allow read: if true;
        allow create, update, delete: if isOwner(userId);

        match /review/{reviewId} {
          allow read: if true;
          allow create, update, delete: if isOwner(userId);
        }
      }

      match /addresses/{addressId} {
        allow read: if true;
        allow create, update, delete: if isOwner(userId);
      }
    }
    
    // Regras específicas para parceiros
    match /partners/{partnerId} {
      allow read: if true;
      allow create: if isOwner(partnerId);
      allow update: if (
        isOwner(partnerId) || 
        (isAdmin() && 
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isActive', 'lastUpdated']) ||
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastUpdated', 'isActive']))
        )
      );
      allow delete: if isOwner(partnerId);
      
      // Regras para cupons
      match /coupons/{couponId} {
        allow read: if true;
        allow create, update, delete: if isOwner(partnerId);
      }
      
      match /delivery_fees/{feeId} {
        allow read: if true;
        allow create, update, delete: if isOwner(partnerId);
      }

      match /fees/{feeId} {
        allow read: if true;
        allow create, update, delete: if isOwner(partnerId);
      }

      match /neighborhoods_fees/{feeId} {
        allow read: if true;
        allow create, update, delete: if isOwner(partnerId);
      }
      
      match /orders/{orderId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && (
          resource.data.userId == request.auth.uid || isOwner(partnerId)
        );
        
        match /review/{reviewId} {
          allow read: if true;
          allow create: if isAuthenticated();
          allow update, delete: if isAuthenticated() && (
            resource.data.userId == request.auth.uid
          );
        }
      }
      
      match /app_fees/{feeId} {
        allow read: if isAuthenticated() && (isOwner(partnerId) || isAdmin());
        allow create, update, delete: if isAdmin();
      }
      
      match /products/{productId} {
        allow read: if true;
        allow create, update, delete: if isOwner(partnerId);
      }
      
      match /categories/{categoryId} {
        allow read: if true;
        allow create, update, delete: if isOwner(partnerId);
      }

      // Subcoleções de partners
      match /billing_control/{docId} {
        allow read: if isAuthenticated() && (isOwner(partnerId) || isAdmin());
        allow create, update, delete: if isAdmin();
      }
      
      match /invoices/{invoiceId} {
        allow read: if isAuthenticated() && (isOwner(partnerId) || isAdmin());
        allow create, update, delete: if isAdmin();
      }
    }
    
    // Regras para avaliações globais
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid
      );
    }
    
    // Regras para categorias principais
    match /categories/{categoryId} {
      allow read: if true;
      allow create, update, delete: if isAuthenticated();
      
      match /subcategories/{subcategoryId} {
        allow read: if true;
        allow create, update, delete: if isAuthenticated();
      }
    }
    
    // Regras para estrutura de localidades
    match /states/{stateId} {
      allow read: if true;
      allow write: if isAuthenticated();

      match /cities/{cityId} {
        allow read: if true;
        allow write: if isAuthenticated();

        match /neighborhoods/{neighborhoodId} {
          allow read: if true;
          allow write: if isAuthenticated();
        }
      }
    }
    
    match /cities/{cityId} {
      allow read: if true;
    }
  }
} 