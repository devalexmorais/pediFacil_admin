rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Funções auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN';
    }
    
    function isSeller() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'SELLER';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Regras para usuários
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin() || isOwner(userId);
    }

    // Regras para estabelecimentos
    match /sellers/{sellerId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin() || 
        (isSeller() && resource.data.userId == request.auth.uid);
    }

    // Regras para produtos
    match /products/{productId} {
      allow read: if true;
      allow create, update, delete: if isAdmin() || 
        (isSeller() && resource.data.sellerId == request.auth.uid);
    }

    // Regras para pedidos
    match /orders/{orderId} {
      allow read: if isAdmin() || 
        isOwner(resource.data.customerId) || 
        (isSeller() && resource.data.sellerId == request.auth.uid);
      allow create: if isAuthenticated();
      allow update: if isAdmin() || 
        (isSeller() && resource.data.sellerId == request.auth.uid);
    }

    // Regras para categorias
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
      
      match /subcategories/{subcategoryId} {
        allow read: if true;
        allow write: if isAdmin();
      }
    }

    // Regras para banners
    match /banners/{bannerId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Regras para cupons
    match /coupons/{couponId} {
      allow read: if true;
      allow create: if isAdmin();
      allow update, delete: if isAdmin();
    }

    // Regras para notificações
    match /notifications/{notificationId} {
      function isValidNotification() {
        let incoming = request.resource.data;
        return incoming.size() == 9 && // Número exato de campos
          incoming.title is string && incoming.title.size() > 0 &&
          incoming.message is string && incoming.message.size() > 0 &&
          incoming.type in ['PROMOTION', 'NEWS', 'ALERT'] &&
          incoming.recipientType in ['CUSTOMER', 'SELLER'] &&
          (incoming.couponCode == null || (incoming.couponCode is string && incoming.couponCode.size() > 0)) &&
          incoming.read is bool &&
          incoming.createdAt is timestamp &&
          incoming.updatedAt is timestamp &&
          incoming.recipient.size() == 3 &&
          incoming.recipient.id is string &&
          incoming.recipient.name is string &&
          incoming.recipient.email is string;
      }

      allow read: if isAuthenticated() && (
        isAdmin() || // Admins podem ler todas as notificações
        resource.data.recipientType == request.auth.role || // Usuários podem ler notificações do seu tipo
        resource.data.recipient.id == 'all' // Todos podem ler notificações gerais
      );
      
      allow create: if isAdmin() && isValidNotification();
      allow update: if isAdmin() && isValidNotification();
      allow delete: if isAdmin();
    }

    // Regras para estados, cidades e bairros
    match /states/{stateId} {
      allow read: if true;
      allow write: if isAdmin();
      
      match /cities/{cityId} {
        allow read: if true;
        allow write: if isAdmin();
        
        match /neighborhoods/{neighborhoodId} {
          allow read: if true;
          allow write: if isAdmin();
        }
      }
    }
  }
} 